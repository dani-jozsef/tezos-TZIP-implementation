{ parameter
    (or (pair %transfer (address %from) (address %to) (nat %value))
        (or (pair %approve (address %spender) (nat %value))
            (or (unit %faucet)
                (or (pair %getAllowance (pair (address %owner) (address %spender)) (contract nat))
                    (or (pair %getBalance address (contract nat))
                        (pair %getTotalSupply unit (contract nat))))))) ;
  storage
    (pair (pair (big_map %ledger address (pair nat (map address nat)))
                (big_map %metadata string bytes))
          (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
          (nat %totalSupply)) ;
  code { LAMBDA
           (pair (map address nat) address)
           nat
           { UNPAIR ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
         LAMBDA
           (pair (map address nat) address nat)
           (map address nat)
           { UNPAIR 3 ;
             PUSH nat 0 ;
             DUP 4 ;
             COMPARE ;
             GT ;
             IF { DUG 2 ; SWAP ; SOME ; SWAP ; UPDATE }
                { DIG 2 ; DROP ; SWAP ; NONE nat ; SWAP ; UPDATE } } ;
         LAMBDA
           (pair (big_map address (pair nat (map address nat))) address)
           (pair nat (map address nat))
           { UNPAIR ;
             SWAP ;
             GET ;
             IF_NONE { EMPTY_MAP address nat ; PUSH nat 0 ; PAIR } {} } ;
         LAMBDA
           (pair (big_map address (pair nat (map address nat))) address nat (map address nat))
           (big_map address (pair nat (map address nat)))
           { UNPAIR 4 ; DIG 3 ; DIG 3 ; PAIR ; SOME ; DIG 2 ; UPDATE } ;
         LAMBDA
           (pair (pair (lambda
                          (pair (big_map address (pair nat (map address nat))) address nat (map address nat))
                          (big_map address (pair nat (map address nat))))
                       (lambda
                          (pair (big_map address (pair nat (map address nat))) address)
                          (pair nat (map address nat))))
                 (pair (big_map address (pair nat (map address nat))) address nat))
           (big_map address (pair nat (map address nat)))
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR 3 ;
             DUP 2 ;
             DUP 2 ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             UNPAIR ;
             DIG 4 ;
             ADD ;
             DIG 3 ;
             DIG 3 ;
             PAIR 4 ;
             EXEC } ;
         DUP 3 ;
         DUP 3 ;
         PAIR ;
         APPLY ;
         LAMBDA
           (pair (pair (big_map address (pair nat (map address nat))) (big_map string bytes))
                 (big_map nat (pair nat (map string bytes)))
                 nat)
           (big_map address (pair nat (map address nat)))
           { CAR ; CAR } ;
         LAMBDA
           (pair (pair (pair (big_map address (pair nat (map address nat))) (big_map string bytes))
                       (big_map nat (pair nat (map string bytes)))
                       nat)
                 (big_map address (pair nat (map address nat))))
           (pair (pair (big_map address (pair nat (map address nat))) (big_map string bytes))
                 (big_map nat (pair nat (map string bytes)))
                 nat)
           { UNPAIR ; UNPAIR ; CDR ; DIG 2 ; PAIR ; PAIR } ;
         DIG 7 ;
         UNPAIR ;
         IF_LEFT
           { UNPAIR 3 ;
             DUP 4 ;
             DIG 6 ;
             SWAP ;
             EXEC ;
             DUP 4 ;
             DIG 2 ;
             SENDER ;
             DIG 3 ;
             DUP 3 ;
             DUP 2 ;
             PAIR ;
             DIG 11 ;
             SWAP ;
             EXEC ;
             UNPAIR ;
             DUP 5 ;
             DUP 5 ;
             COMPARE ;
             EQ ;
             IF { DIG 3 ; DIG 12 ; DIG 13 ; DROP 3 ; SWAP }
                { DUP 4 ;
                  DUP 3 ;
                  PAIR ;
                  DIG 14 ;
                  SWAP ;
                  EXEC ;
                  PUSH string "NotEnoughAllowance" ;
                  DUP 8 ;
                  DUP 3 ;
                  COMPARE ;
                  GE ;
                  IF { DROP } { FAILWITH } ;
                  DUP 7 ;
                  SWAP ;
                  SUB ;
                  ABS ;
                  DIG 4 ;
                  DIG 3 ;
                  PAIR 3 ;
                  DIG 11 ;
                  SWAP ;
                  EXEC } ;
             PUSH string "NotEnoughBalance" ;
             DUP 6 ;
             DUP 4 ;
             COMPARE ;
             GE ;
             IF { DROP } { FAILWITH } ;
             DIG 4 ;
             DIG 2 ;
             SUB ;
             ABS ;
             DIG 3 ;
             DIG 3 ;
             PAIR 4 ;
             DIG 6 ;
             SWAP ;
             EXEC ;
             PAIR 3 ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             SWAP ;
             PAIR ;
             EXEC ;
             NIL operation }
           { IF_LEFT
               { DIG 4 ;
                 DROP ;
                 UNPAIR ;
                 DUP 3 ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DUG 2 ;
                 SENDER ;
                 DIG 3 ;
                 DUP 2 ;
                 DUP 2 ;
                 PAIR ;
                 DIG 8 ;
                 SWAP ;
                 EXEC ;
                 UNPAIR ;
                 DUP 5 ;
                 DUP 3 ;
                 PAIR ;
                 DIG 11 ;
                 SWAP ;
                 EXEC ;
                 PUSH string "Switching allowances from N to M is a vulnerability" ;
                 PUSH nat 0 ;
                 DUP 9 ;
                 COMPARE ;
                 EQ ;
                 PUSH nat 0 ;
                 DIG 3 ;
                 COMPARE ;
                 EQ ;
                 OR ;
                 IF { DROP } { FAILWITH } ;
                 DIG 5 ;
                 DIG 5 ;
                 DIG 3 ;
                 PAIR 3 ;
                 DIG 7 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DIG 3 ;
                 DIG 3 ;
                 PAIR 4 ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 PAIR ;
                 EXEC ;
                 NIL operation }
               { DIG 5 ;
                 DIG 7 ;
                 DROP 2 ;
                 IF_LEFT
                   { DIG 5 ;
                     DIG 6 ;
                     DROP 3 ;
                     DUP ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     PUSH nat 6001 ;
                     SENDER ;
                     DIG 2 ;
                     PAIR 3 ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     PAIR ;
                     EXEC ;
                     NIL operation }
                   { DIG 2 ;
                     DIG 3 ;
                     DIG 4 ;
                     DROP 3 ;
                     IF_LEFT
                       { UNPAIR ;
                         UNPAIR ;
                         DUP 4 ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         CDR ;
                         PAIR ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         SWAP ;
                         PUSH mutez 0 ;
                         DIG 2 ;
                         TRANSFER_TOKENS }
                       { DIG 3 ;
                         DROP ;
                         IF_LEFT
                           { UNPAIR ;
                             DUP 3 ;
                             CAR ;
                             CAR ;
                             PAIR ;
                             DIG 3 ;
                             SWAP ;
                             EXEC ;
                             SWAP ;
                             PUSH mutez 0 ;
                             DIG 2 ;
                             CAR ;
                             TRANSFER_TOKENS }
                           { DIG 2 ; DROP ; CDR ; PUSH mutez 0 ; DUP 3 ; CDR ; CDR ; TRANSFER_TOKENS } } ;
                     SWAP ;
                     NIL operation ;
                     DIG 2 ;
                     CONS } } } ;
         PAIR } }

